// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradingDashboard.DataAccess;

#nullable disable

namespace TradingDashboard.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240728174727_madeSecurityTypeNullable")]
    partial class madeSecurityTypeNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TradingDashboard.DataAccess.Entities.Stock", b =>
                {
                    b.Property<long>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StockId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExchangeToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("FreezeQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("InstrumentKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstrumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Isin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LotSize")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<string>("SecurityType")
                        .HasColumnType("text");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<double>("TickSize")
                        .HasColumnType("double precision");

                    b.Property<string>("TradingSymbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StockId");

                    b.ToTable("stocks", (string)null);
                });

            modelBuilder.Entity("TradingDashboard.DataAccess.Entities.StockWatchlistMap", b =>
                {
                    b.Property<long>("stockId")
                        .HasColumnType("bigint");

                    b.Property<long>("WatchlistId")
                        .HasColumnType("bigint");

                    b.HasKey("stockId", "WatchlistId");

                    b.HasIndex("WatchlistId");

                    b.ToTable("stocks_watchlist_map", (string)null);
                });

            modelBuilder.Entity("TradingDashboard.DataAccess.Entities.Watchlist", b =>
                {
                    b.Property<long>("WatchlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("WatchlistId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("WatchlistId");

                    b.ToTable("watchlists", (string)null);
                });

            modelBuilder.Entity("TradingDashboard.DataAccess.Entities.StockWatchlistMap", b =>
                {
                    b.HasOne("TradingDashboard.DataAccess.Entities.Watchlist", "Watchlist")
                        .WithMany("StockWatchlistMaps")
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingDashboard.DataAccess.Entities.Stock", "Stock")
                        .WithMany("StockWatchlistMaps")
                        .HasForeignKey("stockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("TradingDashboard.DataAccess.Entities.Stock", b =>
                {
                    b.Navigation("StockWatchlistMaps");
                });

            modelBuilder.Entity("TradingDashboard.DataAccess.Entities.Watchlist", b =>
                {
                    b.Navigation("StockWatchlistMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
